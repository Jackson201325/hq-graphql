# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/graphql-schema_comparator/all/graphql-schema_comparator.rbi
#
# graphql-schema_comparator-0.6.1
module GraphQL
end
module GraphQL::SchemaComparator
  def self.compare(old_schema, new_schema); end
  def self.parse_schema(schema); end
end
class GraphQL::SchemaComparator::Result
  def breaking?; end
  def breaking_changes; end
  def changes; end
  def dangerous_changes; end
  def identical?; end
  def initialize(changes); end
  def non_breaking_changes; end
end
module GraphQL::SchemaComparator::Changes
end
class GraphQL::SchemaComparator::Changes::Criticality
  def <=>(other); end
  def breaking?; end
  def dangerous?; end
  def initialize(level: nil, reason: nil); end
  def level; end
  def non_breaking?; end
  def reason; end
  def self.breaking(reason: nil); end
  def self.dangerous(reason: nil); end
  def self.non_breaking(reason: nil); end
end
module GraphQL::SchemaComparator::Changes::SafeTypeChange
  def safe_change_for_field?(old_type, new_type); end
  def safe_change_for_input_value?(old_type, new_type); end
end
class GraphQL::SchemaComparator::Changes::AbstractChange
  def breaking?; end
  def criticality; end
  def dangerous?; end
  def message; end
  def non_breaking?; end
  def path; end
end
class GraphQL::SchemaComparator::Changes::TypeRemoved < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def initialize(removed_type); end
  def message; end
  def path; end
  def removed_type; end
end
class GraphQL::SchemaComparator::Changes::DirectiveRemoved < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def directive; end
  def initialize(directive); end
  def message; end
  def path; end
end
class GraphQL::SchemaComparator::Changes::TypeKindChanged < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def initialize(old_type, new_type); end
  def message; end
  def new_type; end
  def old_type; end
  def path; end
end
class GraphQL::SchemaComparator::Changes::EnumValueRemoved < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def enum_type; end
  def enum_value; end
  def initialize(enum_type, enum_value); end
  def message; end
  def path; end
end
class GraphQL::SchemaComparator::Changes::UnionMemberRemoved < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def initialize(union_type, union_member); end
  def message; end
  def path; end
  def union_member; end
  def union_type; end
end
class GraphQL::SchemaComparator::Changes::InputFieldRemoved < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def field; end
  def initialize(input_object_type, field); end
  def input_object_type; end
  def message; end
  def path; end
end
class GraphQL::SchemaComparator::Changes::FieldArgumentRemoved < GraphQL::SchemaComparator::Changes::AbstractChange
  def argument; end
  def criticality; end
  def field; end
  def initialize(object_type, field, argument); end
  def message; end
  def object_type; end
  def path; end
end
class GraphQL::SchemaComparator::Changes::DirectiveArgumentRemoved < GraphQL::SchemaComparator::Changes::AbstractChange
  def argument; end
  def criticality; end
  def directive; end
  def initialize(directive, argument); end
  def message; end
  def path; end
end
class GraphQL::SchemaComparator::Changes::SchemaQueryTypeChanged < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def initialize(old_schema, new_schema); end
  def message; end
  def new_schema; end
  def old_schema; end
  def path; end
end
class GraphQL::SchemaComparator::Changes::FieldRemoved < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def field; end
  def initialize(object_type, field); end
  def message; end
  def object_type; end
  def path; end
end
class GraphQL::SchemaComparator::Changes::DirectiveLocationRemoved < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def directive; end
  def initialize(directive, location); end
  def location; end
  def message; end
  def path; end
end
class GraphQL::SchemaComparator::Changes::ObjectTypeInterfaceRemoved < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def initialize(interface, object_type); end
  def interface; end
  def message; end
  def object_type; end
  def path; end
end
class GraphQL::SchemaComparator::Changes::FieldTypeChanged < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def initialize(type, old_field, new_field); end
  def message; end
  def new_field; end
  def old_field; end
  def path; end
  def type; end
  include GraphQL::SchemaComparator::Changes::SafeTypeChange
end
class GraphQL::SchemaComparator::Changes::InputFieldTypeChanged < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def initialize(input_type, old_input_field, new_input_field); end
  def input_type; end
  def message; end
  def new_input_field; end
  def old_input_field; end
  def path; end
  include GraphQL::SchemaComparator::Changes::SafeTypeChange
end
class GraphQL::SchemaComparator::Changes::FieldArgumentTypeChanged < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def field; end
  def initialize(type, field, old_argument, new_argument); end
  def message; end
  def new_argument; end
  def old_argument; end
  def path; end
  def type; end
  include GraphQL::SchemaComparator::Changes::SafeTypeChange
end
class GraphQL::SchemaComparator::Changes::DirectiveArgumentTypeChanged < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def directive; end
  def initialize(directive, old_argument, new_argument); end
  def message; end
  def new_argument; end
  def old_argument; end
  def path; end
  include GraphQL::SchemaComparator::Changes::SafeTypeChange
end
class GraphQL::SchemaComparator::Changes::SchemaMutationTypeChanged < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def initialize(old_schema, new_schema); end
  def message; end
  def new_schema; end
  def old_schema; end
  def path; end
end
class GraphQL::SchemaComparator::Changes::SchemaSubscriptionTypeChanged < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def initialize(old_schema, new_schema); end
  def message; end
  def new_schema; end
  def old_schema; end
  def path; end
end
class GraphQL::SchemaComparator::Changes::FieldArgumentDefaultChanged < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def field; end
  def initialize(type, field, old_argument, new_argument); end
  def message; end
  def new_argument; end
  def old_argument; end
  def path; end
  def type; end
end
class GraphQL::SchemaComparator::Changes::InputFieldDefaultChanged < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def initialize(input_type, old_field, new_field); end
  def input_type; end
  def message; end
  def new_field; end
  def old_field; end
  def path; end
end
class GraphQL::SchemaComparator::Changes::DirectiveArgumentDefaultChanged < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def directive; end
  def initialize(directive, old_argument, new_argument); end
  def message; end
  def new_argument; end
  def old_argument; end
  def path; end
end
class GraphQL::SchemaComparator::Changes::EnumValueAdded < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def enum_type; end
  def enum_value; end
  def initialize(enum_type, enum_value); end
  def message; end
  def path; end
end
class GraphQL::SchemaComparator::Changes::UnionMemberAdded < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def initialize(union_type, union_member); end
  def message; end
  def path; end
  def union_member; end
  def union_type; end
end
class GraphQL::SchemaComparator::Changes::ObjectTypeInterfaceAdded < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def initialize(interface, object_type); end
  def interface; end
  def message; end
  def object_type; end
  def path; end
end
class GraphQL::SchemaComparator::Changes::InputFieldAdded < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def field; end
  def initialize(input_object_type, field); end
  def input_object_type; end
  def message; end
  def path; end
end
class GraphQL::SchemaComparator::Changes::FieldArgumentAdded < GraphQL::SchemaComparator::Changes::AbstractChange
  def argument; end
  def criticality; end
  def field; end
  def initialize(type, field, argument); end
  def message; end
  def path; end
  def type; end
end
class GraphQL::SchemaComparator::Changes::TypeAdded < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def initialize(type); end
  def message; end
  def path; end
  def type; end
end
class GraphQL::SchemaComparator::Changes::DirectiveAdded < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def directive; end
  def initialize(directive); end
  def message; end
  def path; end
end
class GraphQL::SchemaComparator::Changes::TypeDescriptionChanged < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def initialize(old_type, new_type); end
  def message; end
  def new_type; end
  def old_type; end
  def path; end
end
class GraphQL::SchemaComparator::Changes::EnumValueDescriptionChanged < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def enum; end
  def initialize(enum, old_enum_value, new_enum_value); end
  def message; end
  def new_enum_value; end
  def old_enum_value; end
  def path; end
end
class GraphQL::SchemaComparator::Changes::EnumValueDeprecated < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def enum; end
  def initialize(enum, old_enum_value, new_enum_value); end
  def message; end
  def new_enum_value; end
  def old_enum_value; end
  def path; end
end
class GraphQL::SchemaComparator::Changes::InputFieldDescriptionChanged < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def initialize(input_type, old_field, new_field); end
  def input_type; end
  def message; end
  def new_field; end
  def old_field; end
  def path; end
end
class GraphQL::SchemaComparator::Changes::DirectiveDescriptionChanged < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def initialize(old_directive, new_directive); end
  def message; end
  def new_directive; end
  def old_directive; end
  def path; end
end
class GraphQL::SchemaComparator::Changes::FieldDescriptionChanged < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def initialize(type, old_field, new_field); end
  def message; end
  def new_field; end
  def old_field; end
  def path; end
  def type; end
end
class GraphQL::SchemaComparator::Changes::FieldArgumentDescriptionChanged < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def field; end
  def initialize(type, field, old_argument, new_argument); end
  def message; end
  def new_argument; end
  def old_argument; end
  def path; end
  def type; end
end
class GraphQL::SchemaComparator::Changes::DirectiveArgumentDescriptionChanged < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def directive; end
  def initialize(directive, old_argument, new_argument); end
  def message; end
  def new_argument; end
  def old_argument; end
  def path; end
end
class GraphQL::SchemaComparator::Changes::FieldDeprecationChanged < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def initialize(type, old_field, new_field); end
  def message; end
  def new_field; end
  def old_field; end
  def path; end
  def type; end
end
class GraphQL::SchemaComparator::Changes::FieldAdded < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def field; end
  def initialize(object_type, field); end
  def message; end
  def object_type; end
  def path; end
end
class GraphQL::SchemaComparator::Changes::DirectiveLocationAdded < GraphQL::SchemaComparator::Changes::AbstractChange
  def criticality; end
  def directive; end
  def initialize(directive, location); end
  def location; end
  def message; end
  def path; end
end
class GraphQL::SchemaComparator::Changes::FieldAstDirectiveAdded < GraphQL::SchemaComparator::Changes::AbstractChange
  def initialize(*arg0); end
end
class GraphQL::SchemaComparator::Changes::FieldAstDirectiveRemoved < GraphQL::SchemaComparator::Changes::AbstractChange
  def initialize(*arg0); end
end
class GraphQL::SchemaComparator::Changes::EnumValueAstDirectiveAdded < GraphQL::SchemaComparator::Changes::AbstractChange
  def initialize(*arg0); end
end
class GraphQL::SchemaComparator::Changes::EnumValueAstDirectiveRemoved < GraphQL::SchemaComparator::Changes::AbstractChange
  def initialize(*arg0); end
end
class GraphQL::SchemaComparator::Changes::InputFieldAstDirectiveAdded < GraphQL::SchemaComparator::Changes::AbstractChange
  def initialize(*arg0); end
end
class GraphQL::SchemaComparator::Changes::InputFieldAstDirectiveRemoved < GraphQL::SchemaComparator::Changes::AbstractChange
  def initialize(*arg0); end
end
class GraphQL::SchemaComparator::Changes::DirectiveArgumentAstDirectiveAdded < GraphQL::SchemaComparator::Changes::AbstractChange
  def initialize(*arg0); end
end
class GraphQL::SchemaComparator::Changes::DirectiveArgumentAstDirectiveRemoved < GraphQL::SchemaComparator::Changes::AbstractChange
  def initialize(*arg0); end
end
class GraphQL::SchemaComparator::Changes::FieldArgumentAstDirectiveAdded < GraphQL::SchemaComparator::Changes::AbstractChange
  def initialize(*arg0); end
end
class GraphQL::SchemaComparator::Changes::FieldArgumentAstDirectiveRemoved < GraphQL::SchemaComparator::Changes::AbstractChange
  def initialize(*arg0); end
end
class GraphQL::SchemaComparator::Changes::ObjectTypeAstDirectiveAdded < GraphQL::SchemaComparator::Changes::AbstractChange
  def initialize(*arg0); end
end
class GraphQL::SchemaComparator::Changes::ObjectTypeAstDirectiveRemoved < GraphQL::SchemaComparator::Changes::AbstractChange
  def initialize(*arg0); end
end
class GraphQL::SchemaComparator::Changes::InterfaceTypeAstDirectiveAdded < GraphQL::SchemaComparator::Changes::AbstractChange
  def initialize(*arg0); end
end
class GraphQL::SchemaComparator::Changes::InterfaceTypeAstDirectiveRemoved < GraphQL::SchemaComparator::Changes::AbstractChange
  def initialize(*arg0); end
end
class GraphQL::SchemaComparator::Changes::UnionTypeAstDirectiveAdded < GraphQL::SchemaComparator::Changes::AbstractChange
  def initialize(*arg0); end
end
class GraphQL::SchemaComparator::Changes::UnionTypeAstDirectiveRemoved < GraphQL::SchemaComparator::Changes::AbstractChange
  def initialize(*arg0); end
end
class GraphQL::SchemaComparator::Changes::EnumTypeAstDirectiveAdded < GraphQL::SchemaComparator::Changes::AbstractChange
  def initialize(*arg0); end
end
class GraphQL::SchemaComparator::Changes::EnumTypeAstDirectiveRemoved < GraphQL::SchemaComparator::Changes::AbstractChange
  def initialize(*arg0); end
end
class GraphQL::SchemaComparator::Changes::ScalarTypeAstDirectiveAdded < GraphQL::SchemaComparator::Changes::AbstractChange
  def initialize(*arg0); end
end
class GraphQL::SchemaComparator::Changes::ScalarTypeAstDirectiveRemoved < GraphQL::SchemaComparator::Changes::AbstractChange
  def initialize(*arg0); end
end
class GraphQL::SchemaComparator::Changes::InputObjectTypeAstDirectiveAdded < GraphQL::SchemaComparator::Changes::AbstractChange
  def initialize(*arg0); end
end
class GraphQL::SchemaComparator::Changes::InputObjectTypeAstDirectiveRemoved < GraphQL::SchemaComparator::Changes::AbstractChange
  def initialize(*arg0); end
end
class GraphQL::SchemaComparator::Changes::SchemaAstDirectiveAdded < GraphQL::SchemaComparator::Changes::AbstractChange
  def initialize(*arg0); end
end
class GraphQL::SchemaComparator::Changes::SchemaAstDirectiveRemoved < GraphQL::SchemaComparator::Changes::AbstractChange
  def initialize(*arg0); end
end
class GraphQL::SchemaComparator::Changes::DirectiveArgumentAdded < GraphQL::SchemaComparator::Changes::AbstractChange
  def argument; end
  def criticality; end
  def directive; end
  def initialize(directive, argument); end
  def message; end
end
module GraphQL::SchemaComparator::Diff
end
class GraphQL::SchemaComparator::Diff::Schema
  def added_directives; end
  def added_types; end
  def changes_in_directives; end
  def changes_in_schema; end
  def changes_in_type(old_type, new_type); end
  def diff; end
  def each_common_directive(&block); end
  def each_common_type(&block); end
  def initialize(old_schema, new_schema); end
  def new_directives; end
  def new_schema; end
  def new_types; end
  def old_directives; end
  def old_schema; end
  def old_types; end
  def removed_directives; end
  def removed_types; end
end
class GraphQL::SchemaComparator::Diff::Argument
  def diff; end
  def field; end
  def initialize(type, field, old_arg, new_arg); end
  def new_arg; end
  def old_arg; end
  def type; end
end
class GraphQL::SchemaComparator::Diff::Directive
  def added_arguments; end
  def added_locations; end
  def diff; end
  def each_common_argument(&block); end
  def initialize(old_directive, new_directive); end
  def new_arguments; end
  def new_directive; end
  def old_arguments; end
  def old_directive; end
  def removed_arguments; end
  def removed_locations; end
end
class GraphQL::SchemaComparator::Diff::DirectiveArgument
  def diff; end
  def directive; end
  def initialize(directive, old_arg, new_arg); end
  def new_arg; end
  def old_arg; end
end
class GraphQL::SchemaComparator::Diff::Enum
  def added_values; end
  def diff; end
  def each_common_value(&block); end
  def initialize(old_enum, new_enum); end
  def new_enum; end
  def new_values; end
  def old_enum; end
  def old_values; end
  def removed_values; end
end
class GraphQL::SchemaComparator::Diff::Field
  def arg_additions; end
  def arg_removals; end
  def diff; end
  def each_common_argument(&block); end
  def initialize(old_type, new_type, old_field, new_field); end
  def new_arguments; end
  def new_field; end
  def new_type; end
  def old_arguments; end
  def old_field; end
  def old_type; end
end
class GraphQL::SchemaComparator::Diff::InputObject
  def added_fields; end
  def diff; end
  def each_common_field(&block); end
  def initialize(old_type, new_type); end
  def new_fields; end
  def new_type; end
  def old_fields; end
  def old_type; end
  def removed_fields; end
end
class GraphQL::SchemaComparator::Diff::InputField
  def diff; end
  def initialize(old_type, new_type, old_field, new_field); end
  def new_field; end
  def new_type; end
  def old_field; end
  def old_type; end
end
class GraphQL::SchemaComparator::Diff::ObjectType
  def diff; end
  def each_common_field(&block); end
  def field_additions; end
  def field_removals; end
  def initialize(old_type, new_type); end
  def interface_additions; end
  def interface_removals; end
  def new_fields; end
  def new_interfaces; end
  def new_type; end
  def old_fields; end
  def old_interfaces; end
  def old_type; end
end
class GraphQL::SchemaComparator::Diff::Interface
  def diff; end
  def each_common_field(&block); end
  def field_additions; end
  def field_removals; end
  def initialize(old_iface, new_iface); end
  def new_fields; end
  def new_iface; end
  def old_fields; end
  def old_iface; end
end
class GraphQL::SchemaComparator::Diff::Union
  def added_possible_types; end
  def diff; end
  def initialize(old_type, new_type); end
  def new_possible_types; end
  def new_type; end
  def old_possible_types; end
  def old_type; end
  def removed_possible_types; end
end
